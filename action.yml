name: 'Setup Vulkan SDK'
description: 'Sets up the Vulkan SDK for the given platform'

inputs:
  version:
    description: 'Vulkan SDK version'
    default: 'latest'
    required: false

runs:
  using: composite
  steps:
    # Identify latest SDK version
    - run: echo sdkVersion=$(curl -sSL 'https://vulkan.lunarg.com/sdk/latest/${{ (runner.os == 'Linux') && 'linux' || ((runner.os == 'macOS') && 'mac' || ((runner.os == 'Windows' && runner.arch == 'x64') && 'windows' || 'warm')) }}.txt') >> "$GITHUB_OUTPUT"
      shell: bash
      id: determineSdkVersion
      if: ${{ inputs.version == 'latest' }}

    # Attempt to load from cache
    - name: Restore existing Vulkan SDK from cache
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: ${{ runner.tool_cache }}/vulkan/${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}
        key: vulkan-sdk-${{ runner.os }}-${{ runner.arch }}-${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}

    # Download and extract SDK if we failed to restore
    - run: |
        sdkVersion='${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}'
        curl -sSL -o "$RUNNER_TEMP/vulkan_sdk.tar.xz" "https://sdk.lunarg.com/sdk/download/$sdkVersion/linux/vulkan_sdk.tar.xz"
        mkdir -p "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion"
        tar -xf "$RUNNER_TEMP/vulkan_sdk.tar.xz" -C "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion" --strip-components 2 "$sdkVersion/x86_64"
      shell: bash
      if: ${{ steps.cache-restore.output.cache-hit != 'true' && runner.os == 'Linux' }}
    - run: |
        sdkVersion='${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}'
        curl -sSL -o "$RUNNER_TEMP/vulkan_sdk.zip" "https://sdk.lunarg.com/sdk/download/$sdkVersion/mac/vulkan_sdk.zip"
        mkdir -p "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion"
        mkdir -p "$RUNNER_TEMP/vulkan_sdk"
        ditto -xk "$RUNNER_TEMP/vulkan_sdk.zip" "$RUNNER_TEMP/vulkan_sdk"
        appRoot="$RUNNER_TEMP/vulkan_sdk/vulkansdk-macOS-$sdkVersion.app"
        installer="$appRoot/Contents/MacOS/vulkansdk-macOS-$sdkVersion"
        $installer --root "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion" --accept-licenses --default-answer --auto-answer OverwriteTargetDirectory=Yes --confirm-command install copy_only=1
      shell: bash
      if: ${{ steps.cache-restore.output.cache-hit != 'true' && runner.os == 'macOS' }}
    - run: |
        $sdkVersion='${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}'
        curl -sSL -o "$RUNNER_TEMP/vulkan_sdk.exe" "https://sdk.lunarg.com/sdk/download/$sdkVersion/windows/vulkan_sdk.exe"
        $null = New-Item -ItemType Directory -Force -Path "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion"
        & "$RUNNER_TEMP/vulkan_sdk.exe" --root "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion" --accept-licenses --default-answer --auto-answer OverwriteTargetDirectory=Yes --confirm-command install
      shell: pwsh
      if: ${{ steps.cache-restore.output.cache-hit != 'true' && runner.os == 'Windows' && runner.arch == 'x64' }}
    - run: |
        $sdkVersion='${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}'
        curl -sSL -o "$RUNNER_TEMP/vulkan_sdk.exe" "https://sdk.lunarg.com/sdk/download/$sdkVersion/warm/vulkan_sdk.exe"
        $null = New-Item -ItemType Directory -Force -Path "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion"
        & "$RUNNER_TEMP/vulkan_sdk.exe" --root "$RUNNER_TOOL_CACHE/vulkan/$sdkVersion" --accept-licenses --default-answer --auto-answer OverwriteTargetDirectory=Yes --confirm-command install
      shell: pwsh
      if: ${{ steps.cache-restore.output.cache-hit != 'true' && runner.os == 'Windows' && (runner.arch == 'ARM' || runner.arch == 'ARM64') }}

    - name: Save cache
      id: cache-save
      uses: actions/cache/save@v4
      with:
        path: ${{ runner.tool_cache }}/vulkan/${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}
        key: ${{ steps.cache-restore.outputs.cache-primary-key }}

    # Setup environment variables
    - run: |
        VULKAN_SDK="$RUNNER_TOOL_CACHE/vulkan/${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}"
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "$(pwd)/Vulkan/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$VULKAN_SDK/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "VK_ADD_LAYER_PATH=$VULKAN_SDK/share/vulkan/explicit_layer.d${VK_ADD_LAYER_PATH:+:$VK_ADD_LAYER_PATH}" >> $GITHUB_ENV
      shell: bash
      if: ${{ runner.os == 'Linux' }}
    - run: |
        VULKAN_SDK="$RUNNER_TOOL_CACHE/vulkan/${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}/macos"
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "$VULKAN_SDK/bin" >> $GITHUB_PATH
        echo "DYLD_LIBRARY_PATH=$VULKAN_SDK/lib${DYLD_LIBRARY_PATH:+:$DYLD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "VK_ICD_FILENAMES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json" >> $GITHUB_ENV
        echo "VK_ADD_LAYER_PATH=$VULKAN_SDK/share/vulkan/explicit_layer.d${VK_ADD_LAYER_PATH:+:$VK_ADD_LAYER_PATH}" >> $GITHUB_ENV
      shell: bash
      if: ${{ runner.os == 'macOS' }}
    - run: |
        $VULKAN_SDK="$RUNNER_TOOL_CACHE\\vulkan\\${{ inputs.version == 'latest' && steps.determineSdkVersion.outputs.sdkVersion || inputs.version }}"
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "$VULKAN_SDK\\Bin" >> $GITHUB_PATH
        echo "VK_LAYER_PATH=$VULKAN_SDK\\Bin" >> $GITHUB_ENV
      shell: pwsh
      if: ${{ runner.os == 'Windows' }}
